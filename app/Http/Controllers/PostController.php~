<?php

namespace App\Http\Controllers;

use App\Events\PostCreated;
use App\Models\Category;
use App\Models\Photo;
use App\Models\Post;
use App\Http\Requests\StorePostRequest;
use App\Http\Requests\UpdatePostRequest;
use App\Services\ExportService;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class PostController extends Controller
{

    //moet erbij om authorize te doen werken voor de policies
    use AuthorizesRequests;
    protected ExportService $exportService; //object variable

    public function __construct(exportService $exportService){
        $this->exportService = $exportService;
    }
    public function exportAll($format){
        $posts = Post::all();
        $headers = ['id', 'title', 'author', 'published', 'created_at', 'updated_at'];
        return $this->exportService->export($format, $posts, $headers, 'posts');
    }
    public function exportOnePost($format, $id)
    {

        $post = Post::where('id', $id)->get();

        $headers = ['id', 'title', 'author', 'published', 'created_at', 'updated_at'];
        return $this->exportService->export($format, $post, $headers, 'post');

    }

    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        //
        $search = request('search');
        $categoryIds = request('category_ids', []);

        $posts = Post::with(['author.roles', 'photo', 'categories'])
            ->published()//dit is de scopeIsPublished van in post.php
            ->filter($search)
            ->inCategories($categoryIds)
            ->sortable()
            /*->latest()*/
            ->paginate(5)
            ->appends(request()->query()); //dit moet erbij voor paginate te doen werken

        $categories = Category::pluck('name', 'id');
        return view('backend.posts.index', compact('posts', 'categories'));

        /*$posts = Post::with(['author', 'photo', 'categories'])->latest()->paginate(5);
        return view('backend.posts.index', compact('posts'));*/

    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
        $categories = Category::pluck('name', 'id');
        return view('backend.posts.create', compact('categories'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(StorePostRequest $request)
    {
        //
        $validated = $request->validated();
        $validated['slug']=Str::slug($validated['title']);
        $validated['author_id']=auth()->user()->id;
        //afbeelding opslaan
        if($request->hasFile('photo_id')){
            $file = $request->file('photo_id');
            $path = $file->store('posts', 'public');//foto moet ik mapje posts bij de fotos
            $photo = Photo::create([
                'path' => $path,
                'alternate_text' => $validated['title'],
            ]);
            $validated['photo_id'] = $photo->id;
        }
        $post = Post::create($validated);
        $post->categories()->sync($request['categories']);

        //events triggeren
        PostCreated::dispatch($post);

        return redirect()->route('posts.index')->with('message', 'Post created successfully.');

    }

    /**
     * Display the specified resource.
     */
    public function show(Post $post)
    {
        //
        return view('backend.posts.show', compact('post'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Post $post)
    {
        //
        $categories = Category::pluck('name', 'id');
        return view('backend.posts.edit', compact('post', 'categories'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(UpdatePostRequest $request, Post $post)
    {
        //

        $this->authorize('update', $post); //use AuthorizesRequests; moet bovenaan erbij om authorize te doen werken

        $validated = $request->validated();
        $validated['slug'] = Str::slug($validated['title']);
        $validated['author_id']=$post->author_id;
        // Afbeelding bijwerken
        if ($request->hasFile('photo_id')) {
            if ($post->photo && Storage::disk('public')->exists($post->photo->path)) {
                Storage::disk('public')->delete($post->photo->path);
            }
            $file = $request->file('photo_id');
            $path = $file->store('posts', 'public');
            // Controleer of de post al een afbeelding heeft
            if ($post->photo) {
                $post->photo->update([
                    'path' => $path,
                    'alternate_text' => $validated['title']
                ]);
                $validated['photo_id'] = $post->photo->id;
            } else {
                // Maak een nieuwe foto aan
                $photo = Photo::create([
                    'path' => $path,
                    'alternate_text' => $validated['title']
                ]);
                $validated['photo_id'] = $photo->id;
            }
        } else {
            // Voorkom dat een null-waarde wordt toegevoegd aan photo_id
            unset($validated['photo_id']);
        }
        $post->update($validated);
        $post->categories()->sync($request->categories);
        return redirect()->route('posts.index')->with('message', 'Post succesvol bijgewerkt.');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Post $post)
    {
        //fysisch op de schijf
        if($post->photo && Storage::disk('public')->exists($post->photo->path)){
            Storage::disk('public')->delete($post->photo->path);
        }
        //delete zelf db
        $post->delete();
        return redirect()->route('posts.index')->with('message', 'Post deleted successfully!');
    }
}
